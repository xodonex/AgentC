// Copyright 2002 Henrik Lauritzen
/*
  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.  This file is offered as-is,
  without any warranty.
*/

// these attitudes are used by default
ATTITUDES {
	#DID = 0;
	#BELIEVE = 1;
	#B = 1;
	#INTEND = 2;
	#I = 2;
}


// the initial relations to all players ($INITIAL_RELATION must
// be specified elsewhere)
FACTS {
 	#B relation(SELF, $RED, $INITIAL_RELATION);
 	#B relation(SELF, $BLUE, $INITIAL_RELATION);
 	#B relation(SELF, $GREEN, $INITIAL_RELATION);
 	#B relation(SELF, $YELLOW, $INITIAL_RELATION);
}


// Exclude beliefs about the agent's relations with itself.
// The simplicity of the FACTS module prevents this case from being
// detected
PROCEDURE init() {
	DROP #B relation(SELF, SELF, _);
}


// definitions for the utility procedures
DEFS {
	$NEGONE = -1.0;
	$NEGHALF = -0.5;
	$NEGQUART = -0.25;
	$ZERO = 0.0;
	$QUART = 0.25;
	$HALF = 0.5;
	$ONE = 1.0;
}


// adjust the relation to a given player by a certain relative amount,
// bounded by $NEGONE and $ONE
PROCEDURE adjustRelation(?player, ?delta) {
	LOCKED {
		IF (#B relation(SELF, ?player, ?X) AS ?old) {
			DROP ?old;
			LET ?y = Q add(?X, ?delta);
			IF (?y > $ONE) {
				ADOPT #B relation(SELF, ?player, $ONE);
				RETURN $ONE;
			}
			ELSIF (?y < $NEGONE) {
				ADOPT #B relation(SELF, ?player, $NEGONE);
				RETURN $NEGONE;
			}
			ELSE {
				ADOPT #B relation(SELF, ?player, ?y);
				RETURN ?y;
			}
		}
	}
}


// ensure that the given relation at least has the specified value
PROCEDURE ensureMinimumRelation(?player, ?value) {
	LOCKED {
		IF (#B relation(SELF, ?player, ?r) AS ?old) {
			IF (?r < ?value) {
				DROP ?old;
				ADOPT #B relation(SELF, ?player, ?value);
			}
		}
	}
}


// ensure that the given relation at most has the specified value
PROCEDURE ensureMaximumRelation(?player, ?value) {
	LOCKED {
		IF (#B relation(SELF, ?player, ?r) AS ?old) {
			IF (?r > ?value) {
				DROP ?old;
				ADOPT #B relation(SELF, ?player, ?value);
			}
		}
	}
}



// Handle negotiations in three separate procedures
PROCEDURE negotiate() {
 	WHEN NOTHING {
 		// make a new inquiry
 		RETURN CALL inquire();
 	}

	WHEN [contents=$ACCEPT] {
		// the message is a reply
	 	RETURN CALL handleReply();
	}
	WHEN [contents=$REJECT] {
		// the message is a reply
		RETURN CALL handleReply();
	}

	// else the message is a notification or an inquiry
	RETURN CALL handleNewMessage();
}


// the inquire() procedure produces new inquiries.
PROCEDURE inquire();

// the handleReply() procedure should handle a reply to the last inquiry
PROCEDURE handleReply();

// the handleNewMessage() should handle a new notification or inquiry
PROCEDURE handleNewMessage();

