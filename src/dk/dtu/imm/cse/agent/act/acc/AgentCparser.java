// Copyright 2002 Henrik Lauritzen.
/*
    This file is part of the AgentC Toolkit.

    The AgentC Toolkit is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The AgentC Toolkit is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the AgentC Toolkit.  If not, see <http://www.gnu.org/licenses/>.
*/
/* Generated By:JavaCC: Do not edit this line. AgentCparser.java */
package dk.dtu.imm.cse.agent.act.acc;

import java.util.*;

import dk.dtu.imm.cse.agent.act.afc.*;


public class AgentCparser implements AccConstants, AgentCparserConstants {

        private ParseTree _tree;

// ***** PROGRAM *****


/**
 * Parses the whole AgentC program.
 */
  final public ParseTree program(ParseTree t) throws ParseException {
  Token name;
  List params;
  Statement preceding = null, stm;
  _tree = t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 18:
      case 19:
      case 20:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        jj_consume_token(14);
        jj_consume_token(15);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTITUDE:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          attitudeDecl(t);
          jj_consume_token(16);
        }
        jj_consume_token(17);
        break;
      case 18:
        jj_consume_token(18);
        jj_consume_token(15);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          def(t);
          jj_consume_token(16);
        }
        jj_consume_token(17);
        break;
      case 19:
        jj_consume_token(19);
        jj_consume_token(15);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTITUDE:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          initialFact(t);
          jj_consume_token(16);
        }
        jj_consume_token(17);
        break;
      case 20:
        jj_consume_token(20);
        name = identifier();
        params = paramList();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          jj_consume_token(16);
                t.addProcedure(name, params, null);
          break;
        case 15:
          jj_consume_token(15);
               List l = new ArrayList(); preceding = null;
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case VARIABLE:
            case 25:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 40:
            case 41:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_5;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 25:
              stm = messageRule();
              break;
            case VARIABLE:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 40:
            case 41:
              stm = statement();
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
      AccUtils.checkReachability(preceding, stm);
      preceding = stm;
      l.add(stm);
          }
          jj_consume_token(17);
              t.addProcedure(name, params, l);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public List paramList() throws ParseException, ParseException {
  List result = new ArrayList();
  Variable v;
    jj_consume_token(21);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      v = variable();
                          result.add(v);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
        jj_consume_token(22);
        v = variable();
                             result.add(v);
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(23);
                                                         {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses a single attitude declaration and adds the result to the
 * given parse tree.
 */
  final public void attitudeDecl(ParseTree t) throws ParseException, ParseException {
  Token t1, t2;
    t1 = jj_consume_token(ATTITUDE);
    jj_consume_token(24);
    t2 = jj_consume_token(INTEGER_LITERAL);
    t.addAttitude(t1, Integer.parseInt(t2.image));
  }

/**
 * Parses a single definition and adds the result to the
 * given parse tree.
 */
  final public void def(ParseTree t) throws ParseException, ParseException {
  Token tok;
  Literal value;
    tok = identifier();
    jj_consume_token(24);
    value = literal();
    t.addDef(tok, value);
  }

/**
 * Parses a single initial fact and adds the result to the
 * given list.
 */
  final public void initialFact(ParseTree t) throws ParseException {
  Sentence s;
    s = sentence();
    t.addFact(s);
  }

/**
 * Parses a block of statements
 */
  final public List block() throws ParseException {
  List result = new ArrayList();
  Token errorToken = null;
  Statement preceding = null, stm;
    jj_consume_token(15);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 40:
      case 41:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      stm = statement();
        AccUtils.checkReachability(preceding, stm);
        preceding = stm;
        result.add(stm);
    }
    jj_consume_token(17);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parses a message guarded block
 */
  final public MessageRule messageRule() throws ParseException {
  LinkedHashMap mGuard;
  List block;
    jj_consume_token(25);
    mGuard = messageGuard();
    block = block();
    {if (true) return new MessageRule(mGuard, block);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedHashMap messageGuard() throws ParseException {
  LinkedHashMap result = new LinkedHashMap();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        messagePatternBinding(result);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 22:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_8;
          }
          jj_consume_token(22);
          messagePatternBinding(result);
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(27);
   {if (true) return result;}
      break;
    case 28:
      jj_consume_token(28);
                {if (true) return null;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void messagePatternBinding(Map result) throws ParseException {
  Token tok;
  String key;
  Value v;
  Sentence s;
  Variable alias;
    tok = identifier();
      key = tok.image;
      if (result.containsKey(key)) {
        AccUtils.throwParseException(tok,
          "Duplicate message pattern \"" + key + "\"");
      }
    jj_consume_token(24);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case VARIABLE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case 36:
    case 49:
    case 50:
      v = expression();
      break;
    case ATTITUDE:
      s = sentence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        alias = variable();
                                                                   s.setAlias(alias);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
                                                                                            v = s;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    result.put(key, v);
  }

  final public Statement statement() throws ParseException {
  Map m;
  Statement stm;
  Variable var;
  Value v;
  Expression e;
  Token tok;
  List list;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 30:
      jj_consume_token(30);
      v = sentenceOrVar();
      jj_consume_token(16);
                                     {if (true) return new MentalUpdateStatement(true, v);}
      break;
    case 31:
      jj_consume_token(31);
      v = sentenceOrVar();
      jj_consume_token(16);
                                      {if (true) return new MentalUpdateStatement(false, v);}
      break;
    case 32:
      jj_consume_token(32);
      m = messageGuard();
      jj_consume_token(16);
                                    {if (true) return new SayStatement((LinkedHashMap)m);}
      break;
    case 37:
      stm = ifStatement();
                           {if (true) return stm;}
      break;
    case 33:
      jj_consume_token(33);
      var = variable();
      jj_consume_token(24);
      v = value();
      jj_consume_token(16);
                                                  {if (true) return new LetStatement(var, v);}
      break;
    case 34:
      jj_consume_token(34);
      list = block();
                               {if (true) return new LockedStatement(list);}
      break;
    case 35:
      jj_consume_token(35);
        e = null; tok = getToken(0);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case VARIABLE:
      case INTEGER_LITERAL:
      case DOUBLE_LITERAL:
      case STRING_LITERAL:
      case 36:
      case 49:
      case 50:
        e = expression();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(16);
        {if (true) return new ReturnStatement(tok, e);}
      break;
    case 40:
    case 41:
      stm = action();
      jj_consume_token(16);
                          {if (true) return stm;}
      break;
    case 36:
      jj_consume_token(36);
      tok = identifier();
      list = termList();
      jj_consume_token(16);
       {if (true) return new ProcedureCall(tok, list);}
      break;
    case VARIABLE:
      var = variable();
      jj_consume_token(24);
      e = expression();
      jj_consume_token(16);
                                                  {if (true) return new Assignment(var, e);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IfStatement ifStatement() throws ParseException {
  List conditions = new ArrayList(2);
  List blocks = new ArrayList(2);
  List l, l2;
    jj_consume_token(37);
    l = conditionList();
    l2 = block();
                                            conditions.add(l); blocks.add(l2);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      jj_consume_token(38);
      l = conditionList();
      l2 = block();
                                              conditions.add(l); blocks.add(l2);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
      jj_consume_token(39);
      l = block();
                        conditions.add(null); blocks.add(l);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    {if (true) return new IfStatement(conditions, blocks);}
    throw new Error("Missing return statement in function");
  }

  final public List termList() throws ParseException {
  List result = new ArrayList(4);
  Expression e;
    jj_consume_token(21);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case VARIABLE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case 36:
    case 49:
    case 50:
      e = expression();
                           result.add(e);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 22:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(22);
        e = expression();
                              result.add(e);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(23);
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Sentence sentence() throws ParseException {
  Token attitude;
  List terms;
  Token name;
  int id;
    attitude = jj_consume_token(ATTITUDE);
    name = identifier();
    terms = termList();
    {if (true) return new Sentence(attitude, name.image, terms);}
    throw new Error("Missing return statement in function");
  }

  final public Value sentenceOrVar() throws ParseException {
  Value v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTITUDE:
      v = sentence();
      break;
    case VARIABLE:
      v = variable();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Action action() throws ParseException {
  Token name;
  List l;
  boolean isDo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      jj_consume_token(40);
           isDo = true;
      break;
    case 41:
      jj_consume_token(41);
             isDo = false;
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = identifier();
    l = termList();
    {if (true) return new Action(isDo, name.image, l);}
    throw new Error("Missing return statement in function");
  }

  final public Condition condition() throws ParseException {
  Condition cond;
  Expression e1, e2;
  int comp;
  List conditions;
  Variable v;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case VARIABLE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case 36:
    case 49:
    case 50:
      e1 = expression();
      comp = comparator();
      e2 = expression();
        {if (true) return new Comparison(e1, comp, e2);}
      break;
    case 42:
      t = jj_consume_token(42);
      cond = condition();
      if (cond instanceof NotCondition) {
        {if (true) return ((NotCondition)cond).getCondition();}
      }
      {if (true) return new NotCondition(cond);}
      break;
    case ATTITUDE:
      cond = sentence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        v = variable();
                                               ((Sentence)cond).setAlias(v);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                                                                                   {if (true) return cond;}
      break;
    case 40:
    case 41:
      cond = action();
                       {if (true) return cond;}
      break;
    case 21:
      jj_consume_token(21);
      cond = condition();
      jj_consume_token(23);
                                  {if (true) return cond;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public int comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
          {if (true) return COMP_EQ;}
      break;
    case 44:
      jj_consume_token(44);
            {if (true) return COMP_NE;}
      break;
    case 45:
      jj_consume_token(45);
           {if (true) return COMP_LT;}
      break;
    case 46:
      jj_consume_token(46);
            {if (true) return COMP_LE;}
      break;
    case 47:
      jj_consume_token(47);
            {if (true) return COMP_GE;}
      break;
    case 48:
      jj_consume_token(48);
           {if (true) return COMP_GT;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List conditionList() throws ParseException {
  List result = new ArrayList(3);
  Condition c;
    jj_consume_token(21);
    c = condition();
                          result.add(c);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      jj_consume_token(22);
      c = condition();
                                                                   result.add(c);
    }
    jj_consume_token(23);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

// ***** Expressions *****
  final public Expression expression() throws ParseException {
  Expression result;
  Token tok;
  List l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      result = constant();
      break;
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
      result = literal();
      break;
    case VARIABLE:
      result = variable();
      break;
    case 50:
      result = query();
      break;
    case 49:
      jj_consume_token(49);
             result = SelfRef.getInstance();
      break;
    case 36:
      jj_consume_token(36);
      tok = identifier();
      l = termList();
                                                result = new ProcedureCall(tok, l);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Query query() throws ParseException {
  Token name;
  List terms;
    jj_consume_token(50);
    name = identifier();
    terms = termList();
                                               {if (true) return new Query(name.image, terms);}
    throw new Error("Missing return statement in function");
  }

  final public Value value() throws ParseException {
  Value result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case VARIABLE:
    case INTEGER_LITERAL:
    case DOUBLE_LITERAL:
    case STRING_LITERAL:
    case 36:
    case 49:
    case 50:
      result = expression();
      break;
    case ATTITUDE:
      result = sentence();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Literal literal() throws ParseException {
  Token t;
  int type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                          type = AccConstants.TYPE_STRING;
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                            type = AccConstants.TYPE_INT;
      break;
    case DOUBLE_LITERAL:
      t = jj_consume_token(DOUBLE_LITERAL);
                           type = AccConstants.TYPE_DOUBLE;
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Literal(type, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Constant constant() throws ParseException {
  Token t;
    t = identifier();
    {if (true) return new Constant(t, _tree.isExternalDef(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public Variable variable() throws ParseException {
  Token t;
    t = jj_consume_token(VARIABLE);
    {if (true) return new Variable(t);}
    throw new Error("Missing return statement in function");
  }

  final public Token identifier() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
    if (t.image.charAt(0) == '$') {
        // remove the escape character
        t.image = t.image.substring(1);
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  public AgentCparserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[31];
  final private int[] jj_la1_0 = {0x1c4000,0x200,0x10,0x200,0xc2000100,0xc2000100,0x18000,0x1c4000,0x400000,0x100,0xc0000100,0x400000,0x10,0x14000000,0x20000000,0x2f10,0x2d10,0xc0000100,0x0,0x0,0x400000,0x2d10,0x300,0x0,0x20000000,0x202f10,0x0,0x400000,0x2d10,0x2f10,0x2c00,};
  final private int[] jj_la1_1 = {0x0,0x0,0x0,0x0,0x33f,0x33f,0x0,0x0,0x0,0x0,0x33f,0x0,0x0,0x0,0x0,0x60010,0x60010,0x33f,0x40,0x80,0x0,0x60010,0x0,0x300,0x0,0x60710,0x1f800,0x0,0x60010,0x60010,0x0,};

  public AgentCparser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AgentCparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public AgentCparser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AgentCparserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public AgentCparser(AgentCparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  public void ReInit(AgentCparserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[51];
    for (int i = 0; i < 51; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
