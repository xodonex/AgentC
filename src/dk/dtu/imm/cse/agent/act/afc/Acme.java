// Copyright 2002 Henrik Lauritzen.
/*
    This file is part of the AgentC Toolkit.

    The AgentC Toolkit is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The AgentC Toolkit is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the AgentC Toolkit.  If not, see <http://www.gnu.org/licenses/>.
*/
package dk.dtu.imm.cse.agent.act.afc;

import java.util.*;

/**
 * This is the implementation base for an ACME (AgentC Mental Engine), 
 * which is the product of the 
 * {@link dk.dtu.imm.cse.agent.act.acc.Acc AgentC compiler}.
 *
 * @author  Henrik Lauritzen
 */
public abstract class Acme {

	// =======================================================================
	// Class fields
	// =======================================================================

	// ------------------------------- public --------------------------------	
	// ------------------------------ protected ------------------------------
	
	// =======================================================================
	// Instance fields
	// =======================================================================
	
	// ------------------------------- public --------------------------------
	// ------------------------------ protected ------------------------------
	
	// ***********************************************************************

	// =======================================================================
	// Constructors
	// =======================================================================
		
	// ------------------------------- public --------------------------------
	// ------------------------------ protected ------------------------------

	/**
	 * Instantiates the ACME.
	 * @param id the ID (name) of the ACME (agent). This ID - which should be
	 * unique - is used to identify the agent for communication etc.
	 */
	protected Acme(Object id) {
		_self = id;
	}
	
	
	// ------------------------------- private -------------------------------

	// ***********************************************************************
	
	// =======================================================================
	// New instance methods
	// =======================================================================
	
	// ------------------------------- public --------------------------------
		
	/**
	 * Methods generated by the ACC from an AgentC specification,
	 *  executes the corresponding AgentC program. 
	 * The component which uses the ACME is 
	 *  free to choose whether, when, how often and with which parameter
	 *  to invoke the method, but concurrent invocations must be
	 *  prohibited. Each invocation corresponds to one run of
	 *  the procedure body, and the message (if any) determines which of
	 *  the WHEN ... clauses will be executed during the invocation.
	 * @param msg a message to be matched in the rules. If the value is
	 *  null, only the top-level rules and WHEN NOTHING ... blocks will be
	 *  executed (the guards of WHEN [ ... ] blocks will not be evaluated).
	 *  If msg is different from null, only top-level
	 *  rules and matching WHEN [ ... ] blocks will be executed (but all
	 *  guards in WHEN [ ... ] blocks will be evaluated).
	 * @exception RuntimeException if an error occurs at run-time. 
	 *  Due to the weak type-check of AgentC, it is possible that a programming
	 *  error (type inconsistency) will not be discovered by the compiler, and
	 *  will cause an exception when this method is invoked.
	 */

	
	/**
	 * Initializes the ACME. This will normally only be invoked by the 
	 * constructor of the ACME's generated by the ACC.
	 * @param actuator the {@link Actuator} to be used for the ACME. 
	 * @param Investigator the {@link Investigator} to be used for the ACME.
	 * @see #createKnowledgeBase()
	 * @see #initKnowledgeBase(KnowledgeBase)
	 */
	public void init(Actuator actuator, Messenger messenger,
				Investigator Investigator) {
		if ((_actuator = actuator) == null ||
				(_messenger = messenger) == null || 
				(_investigator = Investigator) == null) {
			throw new NullPointerException();
		}
		initKnowledgeBase(_knowledgeBase = createKnowledgeBase());		
	}
	
	
	/**
	 * @return the maximal attitude ID used by the ACME. This method
	 *  is generated by the AgentC Compiler based on the input program's
	 *  ATTITUDES ... declarations.
	 */
	public abstract int getMaxAttitude();
	
	
	/**
	 * @return the ID of the ACME. This corresponds to the SELF expression
	 * in AgentC.
	 */
	public final Object getId() {
		return _self;
	}
	
	
	/**
	 * Determines which attitude ID should be used to store the actions in
	 * {@link #doAction(String, Object[])}
	 * @return 0
	 */
	public int getAchievementId() {
		return 0;
	}
	
	
	/**
	 * @return the {@link Actuator} used by the ACME.
	 */
	public final Actuator getActuator() {
		return _actuator;
	}
	
	
	/**
	 * @return the {@link Messenger} used by the ACME.
	 */
	public final Messenger getMessenger() {
		return _messenger;
	}

	
	/**
	 * @return the {@link Investigator} used by the ACME.
	 */
	public final Investigator getInvestigator() {
		return _investigator;
	}
	
	
	/**
	 * @return the {@link KnowledgeBase} used by the ACME.
	 */
	public final KnowledgeBase getKnowledgeBase() {
		return _knowledgeBase;
	}
	
	
	/**
	 * Execute an action. This is merely a shorthand for 
	 * <pre>getActuator().xeq(name, terms)</pre>
	 * corresponding to <pre>XEQ name(terms)</pre> in AgentC.
	 * @see Actuator#xeq(String, Object[])
	 */
	public boolean xeqAction(String name, Object[] terms) {
		return _actuator.xeq(name, terms);
	}
	
	
	/**
	 * Perform an action, that is, attempt to 
	 * {@link #xeqAction(String, Object[]) execute} the action and, if successful,
	 * add the fact corresponding to 
	 * <code>{@link #getAchievementId() #DID} name(terms)</code> to the
	 * knowledge base. This corresponds to <pre>DO name(terms)</pre> in
	 * AgentC.
	 */
	public boolean doAction(String name, Object[] terms) {
		if (_actuator.xeq(name, terms)) {
			int id = getAchievementId();
			if (id >= 0) {
				_knowledgeBase.add(id, name, terms);
			}
			return true;
		}
		else {
			return false;
		}
	}
	
	
	/**
	 * Perform an query. The default implementation merely delegates to
	 *  the {@link #getInvestigator()} to perform the query.
	 */
	public Object query(String name, Object[] terms) {
		return _investigator.query(name, terms);
	}
	

	/**
	 * Send a message. The default implementation merely delegates to
	 *  the {@link #getMessenger()} to send the message.
	 */
	public void send(Map msg) {
		_messenger.send(msg);
	}
	
	
	/**
	 * Compare two values for equality. This is used by the generated code
	 *  to evaluate the equality as a Java expression.
	 */
	public final boolean isEqual(Object obj1, Object obj2) {
		return obj1 == null ? obj2 == null : obj1.equals(obj2);
	}
	
	// ------------------------------ protected ------------------------------
	
	/**
	 * Initializes the knowledge base to its initial state. This method
	 * is generated by the ACC, and corresponds to the ATTITUDES { ... }
	 * section(s) of AgentC.
	 */
	protected abstract void initKnowledgeBase(KnowledgeBase kb);
	
	
	/**
	 * @return an initially empty knowledge base which will be used by the
	 *  ACME. The default implementation returns a {@link AcmeKnowledgeBase},
	 *  which allows mental attitudes from 0 through {@link #getMaxAttitude()}.
	 */
	protected KnowledgeBase createKnowledgeBase() {
		return new AcmeKnowledgeBase(getMaxAttitude() + 1);
	}
		
	
	// =======================================================================
	// Implementations of abstract methods
	// =======================================================================
	
	// ------------------------------- public --------------------------------
	// ------------------------------ protected ------------------------------

	// =======================================================================
	// Overridden methods
	// =======================================================================
	
	// ------------------------------- public --------------------------------
	
	public String toString() {
		String c = getClass().getName();
		int idx = c.lastIndexOf('$');
		if (idx >= 0) {
			c = c.substring(idx + 1);
		}
		else {
			idx = c.lastIndexOf('.');
			if (idx >= 0) {
				c = c.substring(idx + 1);
			}			
		}
		
		return c + "{" + getId() + "}";
	}
	
	// ------------------------------ protected ------------------------------

	// =======================================================================
	// Class methods
	// =======================================================================
	
	// ------------------------------- public --------------------------------
	// ------------------------------ protected ------------------------------
	
	// ***********************************************************************

	// =======================================================================
	// Private fields
	// =======================================================================
		
	// ------------------------------- class -------------------------------
	// ------------------------------ instance -----------------------------
	
	// the value of SELF in AgentC
	private Object _self;
	
	// executes the DO and XEQ operations.
	private Actuator _actuator;
	
	// executes the SAY operation
	private Messenger _messenger;
	
	// executes the Q operation.
	private Investigator _investigator;
	
	// holds the mental state of the ACME. Used in AgentC's
	// ADOPT and DROP, and implicitly in IF.
	private KnowledgeBase _knowledgeBase;
		
	// =======================================================================
	// Private methods
	// =======================================================================
		
	// ------------------------------- class -------------------------------
	// ------------------------------ instance -----------------------------

	// ***********************************************************************

	// =======================================================================
	// Inner classes
	// =======================================================================
	
}