// Copyright 2002 Henrik Lauritzen.
/*
    This file is part of the AgentC Toolkit.

    The AgentC Toolkit is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The AgentC Toolkit is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the AgentC Toolkit.  If not, see <http://www.gnu.org/licenses/>.
*/
/* Generated By:JavaCC: Do not edit this line. AgentCparserTokenManager.java */
package dk.dtu.imm.cse.agent.act.acc;
import java.util.*;
import dk.dtu.imm.cse.agent.act.afc.*;

public class AgentCparserTokenManager implements AgentCparserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 40:
         return jjStopAtPos(0, 21);
      case 41:
         return jjStopAtPos(0, 23);
      case 44:
         return jjStopAtPos(0, 22);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 61:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 62:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x60004000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x10080040000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xc000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 81:
         return jjStopAtPos(0, 50);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x2000100000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 91:
         return jjStopAtPos(0, 26);
      case 93:
         return jjStopAtPos(0, 27);
      case 123:
         return jjStopAtPos(0, 15);
      case 125:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100080000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2020a00040000L);
      case 70:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L);
      case 79:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x410000000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x80100000L);
      case 83:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x400080000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x2001000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0100000L);
      case 81:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         break;
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000L);
      case 84:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         return jjMoveStringLiteralDfa3_0(active0, 0x810004000L);
      case 89:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         break;
      case 70:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 49);
         break;
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000004000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 76:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 78:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         break;
      case 80:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 83:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         break;
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x400100000L);
      case 70:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         break;
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 83:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         break;
      case 84:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(5, 34);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 78:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 71:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         break;
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         break;
      case 83:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(8, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 53;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x1ffffffffL & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 45)
                     jjAddStates(4, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(16);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 48 && kind > 10)
                     kind = 10;
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 24:
                  if (curChar == 34 && kind > 13)
                     kind = 13;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 15);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar != 46)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 41:
                  if (curChar == 47)
                     jjCheckNAddStates(16, 18);
                  break;
               case 42:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 43:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 44:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 45:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 42)
                     jjAddStates(19, 20);
                  break;
               case 49:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 48);
                  break;
               case 50:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(50, 48);
                  break;
               case 51:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 52:
                  if (curChar == 45)
                     jjAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 1:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               case 2:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(2);
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 95 && kind > 8)
                     kind = 8;
                  break;
               case 10:
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(11);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(23, 25);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 42:
                  jjAddStates(16, 18);
                  break;
               case 47:
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
               case 50:
                  jjCheckNAddTwoStates(50, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 11);
                  break;
               case 42:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 18);
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(50, 48);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 53 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   30, 31, 36, 37, 13, 15, 29, 41, 46, 21, 22, 24, 21, 22, 26, 24, 
   42, 43, 45, 49, 51, 18, 19, 23, 25, 27, 34, 35, 38, 39, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\101\124\124\111\124\125\104\105\123", "\173", "\73", "\175", 
"\104\105\106\123", "\106\101\103\124\123", "\120\122\117\103\105\104\125\122\105", "\50", "\54", 
"\51", "\75", "\127\110\105\116", "\133", "\135", "\116\117\124\110\111\116\107", 
"\101\123", "\101\104\117\120\124", "\104\122\117\120", "\123\101\131", "\114\105\124", 
"\114\117\103\113\105\104", "\122\105\124\125\122\116", "\103\101\114\114", "\111\106", 
"\105\114\123\111\106", "\105\114\123\105", "\104\117", "\130\105\121", "\41", "\75\75", "\41\75", 
"\74", "\74\75", "\76\75", "\76", "\123\105\114\106", "\121", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffef11L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
private JavaCharStream input_stream;
private final int[] jjrounds = new int[53];
private final int[] jjstateSet = new int[106];
protected char curChar;
public AgentCparserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AgentCparserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 53; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
